---

- name: configure nginx upstream
  sudo: true
  template: src=upstream.conf.j2 dest=/etc/nginx/conf.d/upstream/http_syncserver.conf
  notify: reload nginx config

- file: path=/etc/nginx/conf.d/sync/location state=directory
  become: true

- name: configure nginx location
  sudo: true
  template: src=nginx.conf.j2 dest=/etc/nginx/conf.d/location/http_syncserver.conf
  notify: reload nginx config

# - name: install python build environment
#   sudo: true
#   yum: name=python-devel state=present

# - name: install mysql command-line tools
#   sudo: true
#   yum: name=mysql

# - name: install syncserver build dependencies
#   sudo: true
#   pip: name=virtualenv state=present

#
# "legacy" boxes (e.g., 'latest', 'stable', other) have installed `virtualenv`
# in `/usr/bin` Newer boxes put `virtualenv` in `/usr/local/bin`, but other code
# wants to find `virtualenv` in `/usr/bin`. So attempt to symlink but ignore
# failures.
#

- debug: var=image

- name: pull sync docker image
  become: true
  docker_image:
    # pull image always. In a pending update to ansible, it will only set
    # changed:true if the image has actually changed. However, docker_container
    # `state:started` will only re-start if image of configuration has
    # changed.
    force: true
    state: present
    name: mozilla/syncserver
    tag: "{{ sync_docker_tag }}"
  register: image

- name: Start sync docker container
  become: true
  docker_container:
    name: syncserver
    image: mozilla/syncserver{{ ':' + sync_docker_tag }}
    state: "{{sync_docker_state}}"
    network_mode: host
    env:
      SYNCSERVER_PUBLIC_URL: "{{ sync_public_url }}"
      SYNCSERVER_SECRET: "{{ sync_server_secret }}"
      SYNCSERVER_SQLURI: "{{ sync_sqluri }}"
      SYNCSERVER_BATCH_UPLOAD_ENABLED: true
    ports:
      - 5000:5000

    command: /usr/local/bin/gunicorn --bind localhost:5000 syncserver.wsgi_app

- debug: var=container
- meta: flush_handlers



# - name: symlink virtualenv
#   sudo: true
#   failed_when: false
#   changed_when: false
#   file: src=/usr/local/bin/virtualenv dest=/usr/bin/virtualenv state=link

# - name: create syncserver database
#   sudo: true
#   command: mysql --host={{ sync_db_host }} --user=root --password={{ sync_db_password }} -e "CREATE DATABASE IF NOT EXISTS sync"
#   changed_when: false

# - name: install syncserver
#   tags: code
#   sudo: true
#   sudo_user: app
#   git: repo={{ sync_git_repo }}
#        dest=/data/syncserver
#        version={{ sync_git_version }}
#        force=true
#   notify:
#     - build syncserver virtualenv
#     - restart syncserver process

# - name: supervise syncserver
#   sudo: true
#   copy: src=syncserver.conf dest=/etc/supervisor.d/syncserver.conf
#   notify: update supervisor

# - name: configure syncserver
#   sudo: true
#   sudo_user: app
#   template: src=syncserver.ini.j2 dest=/data/syncserver/syncserver.dev.ini
#   notify: restart syncserver process

- meta: flush_handlers
